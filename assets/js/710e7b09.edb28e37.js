(self.webpackChunk_stencila_help=self.webpackChunk_stencila_help||[]).push([[6472],{3905:(e,t,a)=>{"use strict";a.d(t,{Zo:()=>u,kt:()=>d});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function m(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),o=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=o(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,s=e.parentName,u=m(e,["components","mdxType","originalType","parentName"]),p=o(a),d=n,h=p["".concat(s,".").concat(d)]||p[d]||c[d]||l;return a?r.createElement(h,i(i({ref:t},u),{},{components:a})):r.createElement(h,i({ref:t},u))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,i=new Array(l);i[0]=p;var m={};for(var s in t)hasOwnProperty.call(t,s)&&(m[s]=t[s]);m.originalType=e,m.mdxType="string"==typeof e?e:n,i[1]=m;for(var o=2;o<l;o++)i[o]=a[o];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}p.displayName="MDXCreateElement"},7132:(e,t,a)=>{"use strict";a.r(t),a.d(t,{frontMatter:()=>m,contentTitle:()=>s,metadata:()=>o,toc:()=>u,default:()=>p});var r=a(2122),n=a(9756),l=(a(7294),a(3905)),i=["components"],m={category:"Data",slug:"/schema/NumberValidator",custom_edit_url:"https://github.com/stencila/schema/edit/master/schema/NumberValidator.schema.yaml"},s="Number Validator",o={unversionedId:"schema/docs/NumberValidator",id:"schema/docs/NumberValidator",isDocsHomePage:!1,title:"Number Validator",description:"A validator specifying the constraints on a numeric node.",source:"@site/references/schema/docs/NumberValidator.md",sourceDirName:"schema/docs",slug:"/schema/NumberValidator",permalink:"/references/schema/NumberValidator",editUrl:"https://github.com/stencila/schema/edit/master/schema/NumberValidator.schema.yaml",tags:[],version:"current",frontMatter:{category:"Data",slug:"/schema/NumberValidator",custom_edit_url:"https://github.com/stencila/schema/edit/master/schema/NumberValidator.schema.yaml"},sidebar:"sidebar",previous:{title:"Number",permalink:"/references/schema/Number"},next:{title:"Object",permalink:"/references/schema/Object"}},u=[{value:"Properties",id:"properties",children:[],level:2},{value:"Notes",id:"notes",children:[],level:2},{value:"Related",id:"related",children:[],level:2},{value:"Available as",id:"available-as",children:[],level:2},{value:"Source",id:"source",children:[],level:2}],c={toc:u};function p(e){var t=e.components,a=(0,n.Z)(e,i);return(0,l.kt)("wrapper",(0,r.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"number-validator"},"Number Validator"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"A validator specifying the constraints on a numeric node.")),(0,l.kt)("p",null,"A node will be valid if it is a number that meets the ",(0,l.kt)("inlineCode",{parentName:"p"},"maximum"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"multipleOf")," etc properties. Analogous to the JSON Schema ",(0,l.kt)("inlineCode",{parentName:"p"},"number")," validation ",(0,l.kt)("a",{parentName:"p",href:"https://json-schema.org/draft/2019-09/json-schema-validation.html#rfc.section.6.1.1"},"type"),". Note that the ",(0,l.kt)("inlineCode",{parentName:"p"},"IntegerValidator")," type extends this validator with the additional constraint that the number have no fractional part. "),(0,l.kt)("p",null,"This schema type is marked as ",(0,l.kt)("strong",{parentName:"p"},"unstable")," \u26a0\ufe0f and is subject to change."),(0,l.kt)("h2",{id:"properties"},"Properties"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"th"},"@id")),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Inherited from"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"exclusiveMaximum"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://schema.stenci.la/exclusiveMaximum.jsonld"},"stencila:exclusiveMaximum")),(0,l.kt)("td",{parentName:"tr",align:null},"number"),(0,l.kt)("td",{parentName:"tr",align:null},"The exclusive upper limit for a numeric node. See note ",(0,l.kt)("a",{parentName:"td",href:"#notes"},"1"),"."),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/references/schema/NumberValidator"},"NumberValidator"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"exclusiveMinimum"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://schema.stenci.la/exclusiveMinimum.jsonld"},"stencila:exclusiveMinimum")),(0,l.kt)("td",{parentName:"tr",align:null},"number"),(0,l.kt)("td",{parentName:"tr",align:null},"The exclusive lower limit for a numeric node. See note ",(0,l.kt)("a",{parentName:"td",href:"#notes"},"2"),"."),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/references/schema/NumberValidator"},"NumberValidator"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"id"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://schema.org/id"},"schema:id")),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"The identifier for this item."),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/references/schema/Entity"},"Entity"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"maximum"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://schema.stenci.la/maximum.jsonld"},"stencila:maximum")),(0,l.kt)("td",{parentName:"tr",align:null},"number"),(0,l.kt)("td",{parentName:"tr",align:null},"The inclusive upper limit for a numeric node. See note ",(0,l.kt)("a",{parentName:"td",href:"#notes"},"3"),"."),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/references/schema/NumberValidator"},"NumberValidator"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"meta"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://schema.stenci.la/meta.jsonld"},"stencila:meta")),(0,l.kt)("td",{parentName:"tr",align:null},"object"),(0,l.kt)("td",{parentName:"tr",align:null},"Metadata associated with this item."),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/references/schema/Entity"},"Entity"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"minimum"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://schema.stenci.la/minimum.jsonld"},"stencila:minimum")),(0,l.kt)("td",{parentName:"tr",align:null},"number"),(0,l.kt)("td",{parentName:"tr",align:null},"The inclusive lower limit for a numeric node. See note ",(0,l.kt)("a",{parentName:"td",href:"#notes"},"4"),"."),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/references/schema/NumberValidator"},"NumberValidator"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"multipleOf"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://schema.stenci.la/multipleOf.jsonld"},"stencila:multipleOf")),(0,l.kt)("td",{parentName:"tr",align:null},"number"),(0,l.kt)("td",{parentName:"tr",align:null},"A number that a numeric node must be a multiple of. See note ",(0,l.kt)("a",{parentName:"td",href:"#notes"},"5"),"."),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/references/schema/NumberValidator"},"NumberValidator"))))),(0,l.kt)("h2",{id:"notes"},"Notes"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("strong",{parentName:"li"},"exclusiveMaximum")," : A number is valid only if it has a value less than (not equal to) ",(0,l.kt)("inlineCode",{parentName:"li"},"exclusiveMaximum"),"."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("strong",{parentName:"li"},"exclusiveMinimum")," : A number is valid only if it has a value greater than (not equal to) ",(0,l.kt)("inlineCode",{parentName:"li"},"exclusiveMinimum"),"."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("strong",{parentName:"li"},"maximum")," : A number is valid if it is less than, or exactly equal to, ",(0,l.kt)("inlineCode",{parentName:"li"},"maximum"),"."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("strong",{parentName:"li"},"minimum")," : A number is valid if it is greater than, or exactly equal to, ",(0,l.kt)("inlineCode",{parentName:"li"},"minimum"),"."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("strong",{parentName:"li"},"multipleOf")," : A number is valid only if division by this value results in an integer.")),(0,l.kt)("h2",{id:"related"},"Related"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Parent: ",(0,l.kt)("a",{parentName:"li",href:"/references/schema/Validator"},"Validator")),(0,l.kt)("li",{parentName:"ul"},"Descendants: None")),(0,l.kt)("h2",{id:"available-as"},"Available as"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://schema.stenci.la/NumberValidator.jsonld"},"JSON-LD")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://schema.stenci.la/v1/NumberValidator.schema.json"},"JSON Schema")),(0,l.kt)("li",{parentName:"ul"},"Python ",(0,l.kt)("a",{parentName:"li",href:"https://stencila.github.io/schema/python/docs/types.html#schema.types.NumberValidator"},(0,l.kt)("inlineCode",{parentName:"a"},"class NumberValidator"))),(0,l.kt)("li",{parentName:"ul"},"TypeScript ",(0,l.kt)("a",{parentName:"li",href:"https://stencila.github.io/schema/ts/docs/interfaces/numbervalidator.html"},(0,l.kt)("inlineCode",{parentName:"a"},"interface NumberValidator"))),(0,l.kt)("li",{parentName:"ul"},"R ",(0,l.kt)("a",{parentName:"li",href:"https://cran.r-project.org/web/packages/stencilaschema/stencilaschema.pdf"},(0,l.kt)("inlineCode",{parentName:"a"},"class NumberValidator"))),(0,l.kt)("li",{parentName:"ul"},"Rust ",(0,l.kt)("a",{parentName:"li",href:"https://docs.rs/stencila-schema/latest/stencila_schema/struct.NumberValidator.html"},(0,l.kt)("inlineCode",{parentName:"a"},"struct NumberValidator")))),(0,l.kt)("h2",{id:"source"},"Source"),(0,l.kt)("p",null,"This documentation was generated from ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/stencila/schema/blob/master/schema/NumberValidator.schema.yaml"},"NumberValidator.schema.yaml"),"."))}p.isMDXComponent=!0}}]);